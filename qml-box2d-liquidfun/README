About this QML Box2D + LiquidFun Fork

This is a wip commit of a QML Box2D plugin which has LiquidFun merged into it.

Notable changes:
 - LiquidFun merged
 - Working WaveMachine example 
 - Kinematic bodies are changed, so their position is handled from QML side.
   Setting a velocity on them does nothing, but changing their QQuickItem 
   target position will make them follow it. I added a reverse velocity 
   calculation to the box2dworld for these cases, so the dynamic objects 
   should act accordingly when coming to contact with kinematic bodies. 
   The motivation for this, is that I find it more natural to control the 
   animations from QML side.
 - The physics engine stepping bindings are changed to after QQuickWindow 
   afterAnimating-signal. This was to get it in sync with the kinematic body
   change mentioned above.
 - Also the timed stepping is removed and the box2dworld is changed to 
   QQuickItem, which binds the physics stepping to QQuickWindow afterAnimating
   signal.
   
Known issues:
 - If the window goes in background, but there are some running kinematic 
   animations, it will mess the physics engine state and particles (at least) 
   escape boxes and so on. 

---- Original README

QML Box2D plugin
----------------

This plugin is meant to be installed to your Qt/imports directory, or shipped
in a directory of which the parent is added as import path.

The goal is to expose the functionality of Box2D as QML components, in order
to make it easy to write physics based games in QML.


INSTALLING

 qmake
 make
 make install  (goes to Qt's import path, run with sudo if necessary)


RUNNING THE EXAMPLE

 qmlscene examples/boxes/boxes.qml


DEPLOYMENT

Support for deployment to mobile devices like the N900 and N8 is being worked
on.


USING QT CREATOR

For running you can use a "Custom Executable" configuration set to run
"qmlscene" with the right parameters.

When you have write permissions to Qt's import path, it can be convenient to
add a deployment step to your run settings:

 * Go to Projects -> box2d -> Run Settings
 * Choose Add Deploy Step -> Make
 * Enter "install" under "Make arguments"

This will make sure that before running, the version of the plugin is updated
in Qt's import path.
